msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-04-07 00:39+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: devmanual/archs/amd64/text.xml:4(title)
msgid "Arch Specific Notes -- AMD64/EM64T"
msgstr ""

#: devmanual/archs/amd64/text.xml:8(title)
msgid "Position Independent Code Issues"
msgstr ""

#: devmanual/archs/amd64/text.xml:12(c) devmanual/archs/amd64/text.xml:29(c) devmanual/archs/amd64/text.xml:73(c)
msgid "-fPIC"
msgstr ""

#: devmanual/archs/amd64/text.xml:13(c) devmanual/archs/amd64/text.xml:40(c) devmanual/archs/amd64/text.xml:392(c)
msgid "CFLAGS"
msgstr ""

#: devmanual/archs/amd64/text.xml:13(e)
msgid "can"
msgstr ""

#: devmanual/archs/amd64/text.xml:11(p)
msgid "Gentoo Policy demands all shared objects to be compiled with <placeholder-1/> in <placeholder-2/>. Since this is only a rule, you <placeholder-3/> break it on some arches. You might never notice it. On AMD64, this is a necessity, if shared objects aren't built with support for position independent code, the build process bails out with an error message like this:"
msgstr ""

#: devmanual/archs/amd64/text.xml:19(pre)
msgid "foo.o: relocation R_X86_64_32 can not be used when making a shared object; recompile with -fPIC"
msgstr ""

#: devmanual/archs/amd64/text.xml:25(title)
msgid "How to fix -fPIC issues"
msgstr ""

#: devmanual/archs/amd64/text.xml:28(p)
msgid "There are several ways to enforce <placeholder-1/> on shared objects, each with its pros and cons."
msgstr ""

#: devmanual/archs/amd64/text.xml:34(title)
msgid "<c>sed</c>'ing the Makefile"
msgstr ""

#: devmanual/archs/amd64/text.xml:38(c) devmanual/archs/amd64/text.xml:352(c)
msgid "sed"
msgstr ""

#: devmanual/archs/amd64/text.xml:40(e)
msgid "shared"
msgstr ""

#: devmanual/archs/amd64/text.xml:37(p)
msgid "Sometimes, a simple <placeholder-1/> command is enough to fix it, however, the statements normally aren't very readable and may fail when upstream changes the file. Please verify that you only change the <placeholder-2/> for <placeholder-3/> objects, not for the whole package."
msgstr ""

#: devmanual/archs/amd64/text.xml:48(title)
msgid "Patching <c>Makefile.in</c>/<c>configure</c>"
msgstr ""

#: devmanual/archs/amd64/text.xml:51(p)
msgid "This is more readable, and easier to send upstream."
msgstr ""

#: devmanual/archs/amd64/text.xml:62(title)
msgid "How <b>not</b> to fix -fPIC issues"
msgstr ""

#: devmanual/archs/amd64/text.xml:66(b)
msgid "not"
msgstr ""

#: devmanual/archs/amd64/text.xml:66(c)
msgid "Makefile"
msgstr ""

#: devmanual/archs/amd64/text.xml:67(c)
msgid "configure"
msgstr ""

#: devmanual/archs/amd64/text.xml:65(p)
msgid "Do <placeholder-1/> patch the <placeholder-2/> itself, since it is usually generated by the <placeholder-3/> script and may vary heavily, so the patch could fail. Also, this doesn't help upstream at all."
msgstr ""

#: devmanual/archs/amd64/text.xml:72(c)
msgid "append-flags"
msgstr ""

#: devmanual/archs/amd64/text.xml:73(c)
msgid "flag-o-matic.eclass"
msgstr ""

#: devmanual/archs/amd64/text.xml:71(p)
msgid "Another bad idea is to (ab)use <placeholder-1/> function from <placeholder-2/>. Applying <placeholder-3/> on all objects should not be done. It should only be applied to shared objects."
msgstr ""

#: devmanual/archs/amd64/text.xml:84(title)
msgid "Multilib on AMD64"
msgstr ""

#: devmanual/archs/amd64/text.xml:92(c)
msgid "/lib32"
msgstr ""

#: devmanual/archs/amd64/text.xml:92(c)
msgid "/usr/lib32"
msgstr ""

#: devmanual/archs/amd64/text.xml:92(c)
msgid "/lib64"
msgstr ""

#: devmanual/archs/amd64/text.xml:93(c) devmanual/archs/amd64/text.xml:315(c)
msgid "/usr/lib64"
msgstr ""

#: devmanual/archs/amd64/text.xml:87(p)
msgid "The current AMD64 processors are able to natively run 32bit code on a 64bit kernel. Therefore, you can run programs compiled for x86 in an amd64 environment. However, 32bit applications need to be linked against 32bit libraries. Mixing them won't work. For this reason the libraries are sorted, 32bit libraries normally go to <placeholder-1/> respectively <placeholder-2/>, the 64bit ones normally to <placeholder-3/> or <placeholder-4/>. In a perfect world, you wouldn't have to read on. Unfortunately, that's not the case, and so it's a bit more complicated."
msgstr ""

#: devmanual/archs/amd64/text.xml:98(title)
msgid "Multilib-Toolchain"
msgstr ""

#: devmanual/archs/amd64/text.xml:102(title)
msgid "GCC"
msgstr ""

#: devmanual/archs/amd64/text.xml:107(c) devmanual/archs/amd64/text.xml:111(c)
msgid "multilib"
msgstr ""

#: devmanual/archs/amd64/text.xml:108(e)
msgid "pre"
msgstr ""

#: devmanual/archs/amd64/text.xml:110(c)
msgid "2005.0/no-multilib"
msgstr ""

#: devmanual/archs/amd64/text.xml:112(c) devmanual/archs/amd64/text.xml:408(c)
msgid "-m32"
msgstr ""

#: devmanual/archs/amd64/text.xml:112(c) devmanual/archs/amd64/text.xml:408(c)
msgid "-m64"
msgstr ""

#: devmanual/archs/amd64/text.xml:105(p)
msgid "To generate 32bit code, we need a multilib-capable GCC. On other architectures, this functionality is enabled with the USE flag <placeholder-1/>. This is also true for amd64 with the <placeholder-2/>-2005.0 profiles. From 2005.0 on, you have to choose whether you want multilib support or not by selecting the profile. Choose <placeholder-3/> if you don't want it, all other profiles have the <placeholder-4/> USE flag masked, you're forced to it. With these profiles, GCC will produce x86-code whenever you add <placeholder-5/> to its command line. Adding <placeholder-6/> or omitting any bit-width option will default to producing 64bit code."
msgstr ""

#: devmanual/archs/amd64/text.xml:120(title)
msgid "glibc"
msgstr ""

#: devmanual/archs/amd64/text.xml:123(p)
msgid "If you've chosen a multilib profile, glibc will be built twice, once 64bit and once 32bit. This is because nearly every application links against glibc. To understand how this is done in the ebuild, read <uri link=\"::archs/amd64/#The ABI Variable\"/>."
msgstr ""

#: devmanual/archs/amd64/text.xml:137(title)
msgid "The <c>emul-linux-x86-*</c> packages"
msgstr ""

#: devmanual/archs/amd64/text.xml:143(c) devmanual/archs/amd64/text.xml:144(c)
msgid "emul-linux-x86"
msgstr ""

#: devmanual/archs/amd64/text.xml:144(c)
msgid "app-emulation"
msgstr ""

#: devmanual/archs/amd64/text.xml:145(uri)
msgid "here."
msgstr ""

#: devmanual/archs/amd64/text.xml:140(p)
msgid "As you read above, 32bit applications must be linked against 32bit libraries. For that, we've put together the most used libraries and stuck them into the so-called <placeholder-1/> packages, which are located in the <placeholder-2/> category. The current list of all the <placeholder-3/> packages, can be found <placeholder-4/>"
msgstr ""

#: devmanual/archs/amd64/text.xml:148(p)
msgid "These packages only provide pre-compiled libraries. Currently, the archives are assembled manually, which is the main reason to keep the packages as tidy as possible. Do not include libraries that aren't commonly used."
msgstr ""

#: devmanual/archs/amd64/text.xml:156(c)
msgid "/usr/share"
msgstr ""

#: devmanual/archs/amd64/text.xml:154(note)
msgid "The emul-packages might conflict with their native images, but only in uncritical locations like <placeholder-1/> which are arch-independent anyway."
msgstr ""

#: devmanual/archs/amd64/text.xml:163(title)
msgid "<c>Libdir</c> Links"
msgstr ""

#: devmanual/archs/amd64/text.xml:167(c)
msgid "libdir"
msgstr ""

#: devmanual/archs/amd64/text.xml:166(p)
msgid "Currently, we provide several profiles, each with its own combination of <placeholder-1/> configurations."
msgstr ""

#: devmanual/archs/amd64/text.xml:173(th)
msgid "Profile"
msgstr ""

#: devmanual/archs/amd64/text.xml:176(th)
msgid "lib32"
msgstr ""

#: devmanual/archs/amd64/text.xml:179(th)
msgid "lib"
msgstr ""

#: devmanual/archs/amd64/text.xml:182(th)
msgid "lib64"
msgstr ""

#: devmanual/archs/amd64/text.xml:187(ti)
msgid "2004.3"
msgstr ""

#: devmanual/archs/amd64/text.xml:190(ti) devmanual/archs/amd64/text.xml:204(ti)
msgid "*l-&gt;emul*"
msgstr ""

#: devmanual/archs/amd64/text.xml:193(ti) devmanual/archs/amd64/text.xml:210(ti) devmanual/archs/amd64/text.xml:224(ti) devmanual/archs/amd64/text.xml:238(ti) devmanual/archs/amd64/text.xml:252(ti) devmanual/archs/amd64/text.xml:266(ti)
msgid "d64"
msgstr ""

#: devmanual/archs/amd64/text.xml:196(ti)
msgid "*l-&gt;lib*"
msgstr ""

#: devmanual/archs/amd64/text.xml:201(ti)
msgid "2004.3/lib64"
msgstr ""

#: devmanual/archs/amd64/text.xml:207(ti) devmanual/archs/amd64/text.xml:221(ti) devmanual/archs/amd64/text.xml:235(ti)
msgid "*l-&gt;64*"
msgstr ""

#: devmanual/archs/amd64/text.xml:215(ti)
msgid "&gt;=2005.0"
msgstr ""

#: devmanual/archs/amd64/text.xml:218(ti) devmanual/archs/amd64/text.xml:232(ti) devmanual/archs/amd64/text.xml:246(ti) devmanual/archs/amd64/text.xml:263(ti)
msgid "d32"
msgstr ""

#: devmanual/archs/amd64/text.xml:229(ti)
msgid "&gt;=2005.0/no-multilib"
msgstr ""

#: devmanual/archs/amd64/text.xml:243(ti)
msgid "&gt;=2005.0/no-symlink"
msgstr ""

#: devmanual/archs/amd64/text.xml:249(ti) devmanual/archs/amd64/text.xml:273(dt)
msgid "d"
msgstr ""

#: devmanual/archs/amd64/text.xml:257(ti)
msgid "&gt;=2005.0/no-symlink/no-lib32"
msgstr ""

#: devmanual/archs/amd64/text.xml:260(ti)
msgid "inexistant"
msgstr ""

#: devmanual/archs/amd64/text.xml:277(p)
msgid "Directory containing mixed-bit objects"
msgstr ""

#: devmanual/archs/amd64/text.xml:281(dt)
msgid "dXX"
msgstr ""

#: devmanual/archs/amd64/text.xml:285(p)
msgid "Directory containing XXbit objects"
msgstr ""

#: devmanual/archs/amd64/text.xml:289(dt)
msgid "l-&gt;foo"
msgstr ""

#: devmanual/archs/amd64/text.xml:293(p)
msgid "Link to foo"
msgstr ""

#: devmanual/archs/amd64/text.xml:300(c) devmanual/archs/amd64/text.xml:331(c)
msgid "$(get_libdir)"
msgstr ""

#: devmanual/archs/amd64/text.xml:301(c) devmanual/archs/amd64/text.xml:332(c)
msgid "multilib.eclass"
msgstr ""

#: devmanual/archs/amd64/text.xml:302(c)
msgid "ABI"
msgstr ""

#: devmanual/archs/amd64/text.xml:299(p)
msgid "To always get the right path, you should use the function <placeholder-1/> from <placeholder-2/>. It will always return the correct directory, on all arches. And of course it also takes care of the <placeholder-3/> variable."
msgstr ""

#: devmanual/archs/amd64/text.xml:309(title)
msgid "The <c>multilib-strict</c> Feature"
msgstr ""

#: devmanual/archs/amd64/text.xml:313(c) devmanual/archs/amd64/text.xml:314(c) devmanual/archs/amd64/text.xml:351(c)
msgid "/usr/lib"
msgstr ""

#: devmanual/archs/amd64/text.xml:314(c)
msgid "$(prefix)/lib"
msgstr ""

#: devmanual/archs/amd64/text.xml:316(b) devmanual/archs/amd64/text.xml:321(c)
msgid "multilib-strict"
msgstr ""

#: devmanual/archs/amd64/text.xml:317(c)
msgid "(/usr)/lib64"
msgstr ""

#: devmanual/archs/amd64/text.xml:312(p)
msgid "Many Makefiles assume that their libraries should go to <placeholder-1/>, or <placeholder-2/>. This assumption can cause a serious mess if <placeholder-3/> isn't a symlink to <placeholder-4/>. To find the bad packages, we have a portage feature called <placeholder-5/>. It will prevent emerge from putting 64bit libraries into anything other than <placeholder-6/>."
msgstr ""

#: devmanual/archs/amd64/text.xml:322(c)
msgid "MULTILIB_STRICT_EXEMPT"
msgstr ""

#: devmanual/archs/amd64/text.xml:323(c)
msgid "make.profile"
msgstr ""

#: devmanual/archs/amd64/text.xml:320(p)
msgid "<placeholder-1/> currently doesn't check perl5, gcc, gcc-lib and eclipse-3, this behaviour is controlled by the <placeholder-2/> variable in <placeholder-3/>."
msgstr ""

#: devmanual/archs/amd64/text.xml:327(title)
msgid "How to fix ebuilds properly"
msgstr ""

#: devmanual/archs/amd64/text.xml:330(p)
msgid "In most cases, it's sufficient to use the <placeholder-1/> function from <placeholder-2/>:"
msgstr ""

#: devmanual/archs/amd64/text.xml:335(codesample)
msgid "inherit multilib src_compile() { econf \\ --libdir=/usr/$(get_libdir) emake || die } src_install() { emake DESTDIR=\"${D}\" install || die }"
msgstr ""

#: devmanual/archs/amd64/text.xml:350(p)
msgid "Some packages provide really bad Makefiles which hard-code <placeholder-1/>. Those should be <placeholder-2/> -ed or patched. Don't forget to let upstream know about your modifications!"
msgstr ""

#: devmanual/archs/amd64/text.xml:363(title)
msgid "Headers and Multilib"
msgstr ""

#: devmanual/archs/amd64/text.xml:367(c) devmanual/archs/amd64/text.xml:368(c) devmanual/archs/amd64/text.xml:567(c)
msgid "types.h"
msgstr ""

#: devmanual/archs/amd64/text.xml:370(c)
msgid "/usr/include/asm"
msgstr ""

#: devmanual/archs/amd64/text.xml:366(p)
msgid "Most C/C++ programs need standard header files like <placeholder-1/>. Some of them depend on architecture specific facts, e.g. <placeholder-2/> on the length of machine words. To ensure that we can compile both 32bit and 64bit applications and libraries, we treat <placeholder-3/> a bit special."
msgstr ""

#: devmanual/archs/amd64/text.xml:374(c)
msgid "/usr/include/asm/types.h"
msgstr ""

#: devmanual/archs/amd64/text.xml:373(p)
msgid "This is what <placeholder-1/> looks like on an AMD64 box:"
msgstr ""

#: devmanual/archs/amd64/text.xml:377(codesample)
msgid "/* Common header file autogenerated by create_ml_includes in multilib.eclass */ #ifdef __i386__ #include &lt;asm-i386/types.h&gt; #endif /* __i386__ */ #ifdef __x86_64__ #include &lt;asm-x86_64/types.h&gt; #endif /* __x86_64__ */"
msgstr ""

#: devmanual/archs/amd64/text.xml:390(c)
msgid "-D"
msgstr ""

#: devmanual/archs/amd64/text.xml:392(c)
msgid "-D__x86_64__"
msgstr ""

#: devmanual/archs/amd64/text.xml:392(b)
msgid "not necessary"
msgstr ""

#: devmanual/archs/amd64/text.xml:388(p)
msgid "As you can see, this is just a wrapper that decides which file you need depending on the parameter <placeholder-1/> given to gcc. You'll probably run into some troubles if you try to compile something by hand and forget to append <placeholder-2/> to your <placeholder-3/>. Of course, this is <placeholder-4/> when using portage. For an explanation, see the <uri link=\"::archs/amd64/#The ABI Variable\"/> section."
msgstr ""

#: devmanual/archs/amd64/text.xml:401(title)
msgid "The ABI Variable"
msgstr ""

#: devmanual/archs/amd64/text.xml:407(c)
msgid "__i386__"
msgstr ""

#: devmanual/archs/amd64/text.xml:407(c)
msgid "__x86_64__"
msgstr ""

#: devmanual/archs/amd64/text.xml:407(c)
msgid "CDEFINE"
msgstr ""

#: devmanual/archs/amd64/text.xml:409(c)
msgid "profile.bashrc"
msgstr ""

#: devmanual/archs/amd64/text.xml:410(c)
msgid "ABI=x86"
msgstr ""

#: devmanual/archs/amd64/text.xml:404(p)
msgid "Whenever portage builds something on amd64, it has to decide whether it should be 32bit or 64bit. As stated in <uri link=\"::archs/amd64/#Headers and Multilib\"/> the <placeholder-1/> or <placeholder-2/> respectively, is needed in <placeholder-3/>. Also, gcc has to know what code it should produce, therefore <placeholder-4/> or <placeholder-5/> must be appended to CFLAGS. This is done via <placeholder-6/>. All you need to do if you want to build a package 32bit is to set <placeholder-7/>."
msgstr ""

#: devmanual/archs/amd64/text.xml:414(c)
msgid "make.defaults"
msgstr ""

#: devmanual/archs/amd64/text.xml:413(p)
msgid "The details are shown in <placeholder-1/>:"
msgstr ""

#: devmanual/archs/amd64/text.xml:417(codesample)
msgid "MULTILIB_ABIS=\"x86 amd64\" DEFAULT_ABI=\"amd64\" CFLAGS_amd64=\"-m64\" LDFLAGS_amd64=\"-m elf_x86_64\" CHOST_amd64=\"x86_64-pc-linux-gnu\" CDEFINE_amd64=\"__x86_64__\" LIBDIR_amd64=\"lib64\" CFLAGS_x86=\"-m32 -L/emul/linux/x86/lib -L/emul/linux/x86/usr/lib\" LDFLAGS_x86=\"-m elf_i386 -L/emul/linux/x86/lib -L/emul/linux/x86/usr/lib\" CHOST_x86=\"i686-pc-linux-gnu\" CDEFINE_x86=\"__i386__\" LIBDIR_x86=\"lib32\""
msgstr ""

#: devmanual/archs/amd64/text.xml:441(title)
msgid "Porting Notes"
msgstr ""

#: devmanual/archs/amd64/text.xml:445(title)
msgid "Machine Word sizes"
msgstr ""

#: devmanual/archs/amd64/text.xml:448(p)
msgid "On AMD64, some types differ in size from x86:"
msgstr ""

#: devmanual/archs/amd64/text.xml:454(th)
msgid "Type"
msgstr ""

#: devmanual/archs/amd64/text.xml:457(th)
msgid "x86 (ILP32)"
msgstr ""

#: devmanual/archs/amd64/text.xml:460(th)
msgid "amd64 (LP64)"
msgstr ""

#: devmanual/archs/amd64/text.xml:466(c)
msgid "char"
msgstr ""

#: devmanual/archs/amd64/text.xml:468(ti) devmanual/archs/amd64/text.xml:471(ti)
msgid "1 byte"
msgstr ""

#: devmanual/archs/amd64/text.xml:477(c)
msgid "short"
msgstr ""

#: devmanual/archs/amd64/text.xml:479(ti) devmanual/archs/amd64/text.xml:482(ti)
msgid "2 bytes"
msgstr ""

#: devmanual/archs/amd64/text.xml:488(c) devmanual/archs/amd64/text.xml:581(c)
msgid "int"
msgstr ""

#: devmanual/archs/amd64/text.xml:490(ti) devmanual/archs/amd64/text.xml:493(ti) devmanual/archs/amd64/text.xml:502(b) devmanual/archs/amd64/text.xml:524(b) devmanual/archs/amd64/text.xml:534(ti) devmanual/archs/amd64/text.xml:537(ti)
msgid "4 bytes"
msgstr ""

#: devmanual/archs/amd64/text.xml:499(c)
msgid "long"
msgstr ""

#: devmanual/archs/amd64/text.xml:505(b) devmanual/archs/amd64/text.xml:512(ti) devmanual/archs/amd64/text.xml:515(ti) devmanual/archs/amd64/text.xml:527(b) devmanual/archs/amd64/text.xml:545(ti) devmanual/archs/amd64/text.xml:548(ti)
msgid "8 bytes"
msgstr ""

#: devmanual/archs/amd64/text.xml:510(c)
msgid "long long"
msgstr ""

#: devmanual/archs/amd64/text.xml:521(c)
msgid "pointer"
msgstr ""

#: devmanual/archs/amd64/text.xml:532(c)
msgid "float"
msgstr ""

#: devmanual/archs/amd64/text.xml:543(c)
msgid "double"
msgstr ""

#: devmanual/archs/amd64/text.xml:554(c)
msgid "long double"
msgstr ""

#: devmanual/archs/amd64/text.xml:556(ti) devmanual/archs/amd64/text.xml:559(ti)
msgid "16 bytes"
msgstr ""

#: devmanual/archs/amd64/text.xml:566(c)
msgid "uXX"
msgstr ""

#: devmanual/archs/amd64/text.xml:567(c)
msgid "sXX"
msgstr ""

#: devmanual/archs/amd64/text.xml:565(p)
msgid "If you need an exact amount of space, don't use these types but the <placeholder-1/> and <placeholder-2/> ones provided by <placeholder-3/>, where XX is the number of bits you need. Switching to a type that is the same on both arches is not suggested since it's not a clean solution and might cause problems with other arches."
msgstr ""

#: devmanual/archs/amd64/text.xml:576(title)
msgid "Casts"
msgstr ""

#: devmanual/archs/amd64/text.xml:581(c)
msgid "void *"
msgstr ""

#: devmanual/archs/amd64/text.xml:579(p)
msgid "Many upstream developers assume that the length of a pointer is 4 bytes, which can cause problems when programs do casts from <placeholder-1/> to <placeholder-2/> and vice versa. With GCC 3.4, this causes warnings, the compilation won't abort. If you're lucky, your package works, but it's likely that you encounter segmentation faults or strange behaviour. GCC 4.0 refuses to compile such code."
msgstr ""

#: devmanual/archs/amd64/text.xml:594(title)
msgid "Other Resources"
msgstr ""

#: devmanual/archs/amd64/text.xml:599(uri)
msgid "Gentoo/AMD64 Project"
msgstr ""

#: devmanual/archs/amd64/text.xml:602(uri)
msgid "Gentoo/Linux AMD64 FAQ"
msgstr ""

#: devmanual/archs/amd64/text.xml:605(uri)
msgid "Gentoo on AMD64 Forum"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: devmanual/archs/amd64/text.xml:0(None)
msgid "translator-credits"
msgstr ""

